;; ============= control flow ============= 

;; -------------  conditional ------------- 

(if 
    true                    ;; <- condition
    (put "the condition is true")     ;; <- executed if condition is met
)

(if 
    false                   ;; <- condition
    (put "?") ;; <- executed if condition is met
)

;; ------------- equal ------------- 
;; equals works for normal values, such as strings, floats, booleans
(eq 1 1)             ;; true
(eq "equal" "equal") ;; true
(eq true false)      ;; false

;; and for variables
(let a 1)
(put 
    "a == a -> "
    (eq a a))

;; ------------- or ------------- 
;; works the same as equals, but only for booleans
(or false true false) ;; true

(let a false)
(put 
    "a | a | true -> "
    (or a a true))

;; ------------- and ------------ 
(and true false)      ;; false

(let a true)
(put 
    "a & a -> "
    (and a a))

;; ----------- negation ----------- 
(not                  ;; <- negates the first argument, evaluates to true
    (eq 1 2))         ;; <- evaluates to false

(put 
    "not (and a) -> " 
    (not              ;; <- evaluates to true
        (eq a)))      ;; <- evaluates to false

;; vim: syntax=lisp
