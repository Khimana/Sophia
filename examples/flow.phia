;; ============= control flow ============= 

;; -------------  conditional ------------- 

(? 
    true                    ;; <- condition
    (. "the condition is true")     ;; <- executed if condition is met
)

(? 
    false                   ;; <- condition
    (. "?") ;; <- executed if condition is met
)

;; ------------- equal ------------- 
;; equals works for normal values, such as strings, floats, booleans
(= 1 1)
(= "equal" "equal")
(= true true)

;; and for variables
(: a 1 2)
(. 
    "a == a -> "
    (= a a))

;; but not how you think... Sophia merges the lists in the variables to compare
;; into a singular list and checks if all elements in it are the same thats why
;; a is not equal to a itself

;; ------------- or ------------- 
;; works the same as equals, but only for booleans
(| false true false)

(: a false false)
(. 
    "a | a | true -> "
    (| a a true))

;; ------------- and ------------ 
(& true true)

(: a true false)
(. 
    "a & a -> "
    (& a a))

;; vim: syntax=lisp
